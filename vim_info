r - replace one char
R - replace many char until esc is hit

w - move to next word
W - move to next WORD

b - move to begining of next word
B - move to the begining of next WORD


e - move to end of next word
E - move to the end of next WORD

( - move a sentence back
) - move a sentence forward 

{ - move a paragraph back
} - move a paragraph forward 

0 - move to the begining of a line
$ - move to the end of a line

1G - move to the first line of a file
G - move to the last line of a file
:n - move to the nth line of a file

fc - move forward to lable c
Fc - move backward to lable c

H - move to the top of the screen
M - move to the middle of the screen
L - move to the bottom of the screen

I - move to begining of a line and be in insert mode
A - move to end of a line and be in insert mode

% - move to matching (), {}, {}

D - Delete to the end of the current line
:d or dd - Delete current line

:y or yy - yank current line

cw - change a word
caw - change around a word
cW - change a WORD
C - change to end of a line
cc - change whole line

mc - set marker c on this line
`c - go to the begining of marker C line

/string - search for string forward
?string - search for string backward
n - next string,  N - previous sting

:s/pattern/string/flags - replace pattern with string
	flags: g - replace all occurences
	       c - confirm each replace
&  - repeat last :s command

===== Regular expressions ====
.(dot) - any single char except newline
* - 0 or more occurences of any char
[...]  - any single char specified in the set
[^...] - any single char not specified in the set
^ - anchor - begining of the line
$ - anchor - end of the line
\< - anchor - begining of the word
\> - anchor - end of the word
\(...\) - grouping, used to group conditions
\n    - contents of nth grouping

====== Examples =======
/Hello/ - matches any line containing "Hello"
/^TEST$/ - matches if line contains TEST by itself
/^[a-zA-Z]/ - matches any line starts with any letter
/^[a-z].*/ - matches if the first char of the line is a-z and there is at least one more of any char following it.
/2134$/ - matches if line ends in 2134
/\(21|35\)/ - matches if the line contains 21 or 35
/[0-9]*/ - matches if there are 0 or more numbers on the line
/^[^#]/ - matches if the first char is not a # in the line


###### Ranges #######
:3,7d - would delet lines 3 -7
:.,$s/pattern/string/g - will replace from current line to EOF
:%s/pattern/string/g - will replace all line in the file
:.,`cs/pattern/string/g - will replace from current line to marker c

===== Files ====
:r file - read file in after line
:nr file - read file in after line n
!! Replace line with output from program 

:w file - save current file but not exit
:n,mw file - saves lines n through m to a file
:n,mw>>file - saves lines n through m to the end of a file
u - undo
U - undo all changes on line
. Repeat last text-changing command

====== Other Vi stuff =====
J - jones lines
nJ - jones next n lines together

set nu - show line numbers
:= - shows number of line in file
Control-G - displays filename - current line number ...
[[ - move a section back
]] - move a section foreard
Control-d - move foreward 1/2 a screen
control-f move foreward one full screen
Control-u - move backward 1/2 a screen
control-b move backward one full screen
z-carriage return - makes the current line the top line on the page
z. - makes the current line the middle of the line
z- - makes the current line the bottom line of the page
% - moves to associated (), {}, [] ..

"(a-z)nyy or "(a-z)ndd - copies or cuts n lines into named buffer (a-z)
"(a-z)p or "(a-z)P - Pastes text from a named buffer (a-z) after or before current line

==== spliting windwo ===
control-ws - split horizontally
control-wv - split verically
control-w - toggle between windows

==== Shell Functions ====
:!cmd - excutes a shell command
!!cmd - excutes a shell command and places output in file starting at current line
!! - excutes last shell command
r! cmd - reads and inserts output from cmd
!motion_cmd - Sends text from current position to motion cmd to shell cmd 
!}sort - sorts from curent position to end of paragraph and replaces text with sorted text

===== Power commands ===
f,  - find the next , on the current line
t. - same as f but stops before .
dt. - delete from cursor to . not including .
di( - delete inside (
da( - delete around (, including ()
dap - delete around paragraph

====== visual mode ======
v - to enter visual mode
v jjj - will select the next three lines
v kkkkk - will select previous 5 lines
v lllll - will select next 5 characters.
V - will select entire line

====== indentation ======
3>> - indent three lines to right
3<< - indent three lines to left
>2j - indent three lines to right
<2j - indent three lines to left
>} - indent till next blank line
>aB - indent the next block of code (between { })

========== MACROS ==========
q <macro name> to start recording, then
  type set of commands to record
  q to stop recording.
@q to run the macro

=== To apply the macros to multiple lines
select the lines (V5j to select 5 lines down)
:normal @<macro name> to excute the macro


======== Important VIM plugins =====
NERDTree - shows file/directory structure
vundle - manages all vim plugins
ctrlp - fussy file finder
fugitive - git tool
syntastic - syntax checkersyntax checker
surround - change surrounding

==== Surround  === plugin
say we have "Hello World"
> press cs"' inside will change it to
'Hello World'
> cs'<q> will give 
<q>Hello World</q>
> cst" will result in
"Hello World"
> ds" will result
Hello World
> with cursor on Hello, ysiw] will give
[Hello] World
> cs]{ to change it to } with space  ({ - will be without space)
{ Hello } World
> yssb or yss} to wrap entire line with parenthesis
({ Hello } World)
> ds{ds) to change back to original
 Hello  World
> ysiw<em> to emphasize hello
 <em>Hello</em>  World

> to do linewise Visual mode editing, Type V, then 
> S<p class="important"> will result in
<p class="important">
<em>Hello</em>  World
</p>
